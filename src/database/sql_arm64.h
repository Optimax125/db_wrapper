/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 18 "sql.go"
 #include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// GetDBDriverName gets the driver name
//nolint:govet, golint
extern char* GetDBDriverName(GoUintptr utpr);

// DBOpen opens a database specified by its database driver name and a
// driver-specific data source name, usually consisting of at least a
// database name and connection information.
//
// Most users will open a database via a driver-specific connection
// helper function that returns a *DB. No database drivers are included
// in the Go standard library. See https://golang.org/s/sqldrivers for
// a list of third-party drivers.
//
// Open may just validate its arguments without creating a connection
// to the database. To verify that the data source name is valid, call
// Ping.
//
// The returned DB is safe for concurrent use by multiple goroutines
// and maintains its own pool of idle connections. Thus, the Open
// function should be called just once. It is rarely necessary to
// close a DB.
extern GoUintptr DBOpen(char* cDriverName, char* cDataSourceName, GoInt connectionPool);

// Ping verifies a connection to the database is still alive,
// establishing a connection if necessary.
//
// Ping uses context.Background internally; to specify the context, use
// PingContext.
extern GoUint8 Ping(GoUintptr uptr);

// DBClose closes the database and prevents new queries from starting.
// Close then waits for all queries that have started processing on the server
// to finish.
//
// It is rare to Close a DB, as the DB handle is meant to be
// long-lived and shared between many goroutines.
extern GoUint8 DBClose(GoUintptr uptr);

// StmtPrepare creates a prepared statement for later queries or executions.
// Multiple queries or executions may be run concurrently from the
// returned statement.
// The caller must call the statement's Close method
// when the statement is no longer needed.
//
// Prepare uses context.Background internally; to specify the context, use
// PrepareContext.
// func (db *DB) Prepare(query string) (*Stmt, error) {
// 	return db.PrepareContext(context.Background(), query)
// }
extern GoUintptr StmtPrepare(GoUintptr u, char* cQuery);

// GetColumns gets row column's names
//nolint:govet, golint
extern char** GetColumns(GoUintptr uptr);

// GetRow gets row
//nolint:govet, golint
extern char** GetRow(GoUintptr uptr, GoInt i);

// GetTypes gets all row column's types
//nolint:govet, golint
extern char** GetTypes(GoUintptr uptr);

// GetCount get count of query result
//nolint:govet, golint
extern int GetRowsCount(GoUintptr uptr);

// GetCount get count of query result
//nolint:govet, golint
extern int GetColumnCount(GoUintptr uptr);

// QueryExec executes query
extern GoUintptr QueryExec(GoUintptr u, char* cQuery);

// GetTxDriverName is getter method getting DB struct by uintptr
//nolint:govet, golint
extern char* GetTxDriverName(GoUintptr utpr);

// Begin starts a transaction. The default isolation level is dependent on
// the driver.
//
// Begin uses context.Background internally; to specify the context, use
// BeginTx.
extern GoUintptr Begin(GoUintptr u);

// Commit commits the transaction.
extern GoUint8 Commit(GoUintptr uptr);

// Rollback aborts the transaction.
extern GoUint8 Rollback(GoUintptr uptr);

// TxPrepare creates a prepared statement for use within a transaction.
//
// The returned statement operates within the transaction and can no longer
// be used once the transaction has been committed or rolled back.
//
// To use an existing prepared statement on this transaction, see Tx.Stmt.
//
// Prepare uses context.Background internally; to specify the context, use
// PrepareContext.
extern GoUintptr TxPrepare(GoUintptr u, char* cQuery);

// TxQueryExec executes a query that returns rows, typically a SELECT.
//
// Query uses context.Background internally; to specify the context, use
// QueryContext.
extern GoUintptr TxQueryExec(GoUintptr u, char* cQuery);

// StmtExec executes prepare's query
extern GoUintptr StmtExec(GoUintptr u, char* cArgs);

#ifdef __cplusplus
}
#endif
